import java.awt.Color;import org.junit.BeforeClass;import org.junit.Test;import de.kolpa.thb.pizzapronto.KochVO;import de.kolpa.thb.pizzapronto.PizzaVO;import static org.junit.Assert.*;/** * Die Methoden der Klasse KochtVO werden getestet. *  * Zum Testen werden spezielle Assert-Befehle eingesetzt <br> *  * @author Gabriele Schmidt * @version 1.0 04.02.2015 */public class JUnitTestKochVO {	private static KochVO kochX, kochY, kochZ;	@BeforeClass	public static void setUpBeforeClass() throws Exception {				kochX = new  KochVO("Nachname", "Vorname",Color.WHITE);		kochY = new  KochVO(kochX.getNachname(), kochX.getVorname(),kochX.getFarbeSchuerze());		kochZ = new  KochVO(kochX.getNachname(), kochX.getVorname(),kochX.getFarbeSchuerze());	}		@Test	public void equalsInKochVO() {						//For any non-null reference value x, x.equals(null) should return false. 		assertFalse("For any non-null reference value x, x.equals(null) should return false.", kochX.equals(null));						//Zwei Objekte		assertTrue(kochY.getClass() + " erstellt mit dem Initialisierungskonstruktor neue Objekte ", kochY != kochX);				//It is reflexive: for any non-null reference value x, x.equals(x) should return true. 		assertTrue("It is reflexive: for any non-null reference value x, x.equals(x) should return true. ", kochY.equals(kochY));				//It is symmetric: for any non-null reference values x and y, x.equals(y) should return true if and only if y.equals(x) returns true.  		assertTrue("It is symmetric: for any non-null reference values x and y, x.equals(y) should return true if and only if y.equals(x) returns true. ", kochX.equals(kochY) == kochY.equals(kochX));					//It is transitive: for any non-null reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true.   		assertTrue("It is transitive: for any non-null reference values x, y, and z, if x.equals(y) returns true and y.equals(z) returns true, then x.equals(z) should return true. ", (kochX.equals(kochY) && kochY.equals(kochZ)) ? kochX.equals(kochZ): false);					//Equals		assertTrue(kochY.getClass() + " equals arbeitet bei gleichen Objekten richtig ", kochY.equals(kochX));				kochZ.setNachname("Anders");		assertFalse(kochZ.getClass() + " equals arbeitet bei ungleichen Objekten richtig ", kochZ.equals(kochX));				assertFalse(kochZ.getClass() + " equals arbeitet bei falschen Objekten (Nicht-" + kochZ.getClass() + " richtig ", kochZ.equals(new PizzaVO()));	}		@Test	public void equalsHashCodeInKochVO() {				//Gleiche Objekte liefern den gleichen HashCode  		assertTrue("Gleiche Objekte liefern den gleichen HashCode", kochX.equals(kochY) == ( kochX.hashCode() == kochY.hashCode()));		}}